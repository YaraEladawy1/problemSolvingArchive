(stone-paper-scissors) project

#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

enum enGameChoices
{
    stone = 1,
    paper = 2,
    scissors = 3
};

enum enWinner
{
    player1 = 1,
    computer = 2,
    draw = 3
};

int GetRandomNumber(int from, int to)
{
    return rand() % (to - from + 1) + from;
}

struct stRoundInfo
{
    short RoundNumber = 0;
    enGameChoices playerChoice;
    enGameChoices computerChoice;
    enWinner Winner;
    string WinnerName;
};

struct stGameResults
{
    short GameRounds = 0;
    short playerWinTimes = 0;
    short computerWinTimes = 0;
    short DrawTimes = 0;
    enWinner Winner;
    string WinnerName = " ";
};

string winnerName(enWinner Winner)
{
    string arrWinnerName[3] = {"Player", "Computer", "No Winner"};
    return arrWinnerName[Winner - 1];
}

enWinner WhoWonRound(stRoundInfo RoundInfo)
{
    if (RoundInfo.playerChoice == RoundInfo.computerChoice)
    {
        return enWinner::draw;
    }

    switch (RoundInfo.playerChoice)
    {
    case enGameChoices::stone:
        return (RoundInfo.computerChoice == enGameChoices::paper) ? enWinner::computer : enWinner::player1;
    case enGameChoices::scissors:
        return (RoundInfo.computerChoice == enGameChoices::stone) ? enWinner::computer : enWinner::player1;
    case enGameChoices::paper:
        return (RoundInfo.computerChoice == enGameChoices::scissors) ? enWinner::computer : enWinner::player1;
    }
    return enWinner::draw;
}

string ChoiceName(enGameChoices choice)
{
    string arrGameChoice[3] = {"Stone", "Paper", "Scissors"};
    return arrGameChoice[choice - 1];
}

void PrintRoundInfo(stRoundInfo RoundInfo)
{
    cout << "\nRound " << RoundInfo.RoundNumber << endl;
    cout << "Player's Choice: " << ChoiceName(RoundInfo.playerChoice) << endl;
    cout << "Computer's Choice: " << ChoiceName(RoundInfo.computerChoice) << endl;
    cout << "Round Winner: " << RoundInfo.WinnerName << endl;
}

enWinner WhoWonGame(short playerWinTimes, short computerWinTimes)
{
    if (playerWinTimes > computerWinTimes)
        return enWinner::player1;
    else if (computerWinTimes > playerWinTimes)
        return enWinner::computer;
    return enWinner::draw;
}

stGameResults fillGameResults(short GameRounds, short playerWinTimes, short computerWinTimes, short DrawTimes)
{
    stGameResults GameResults;
    GameResults.GameRounds = GameRounds;
    GameResults.playerWinTimes = playerWinTimes;
    GameResults.computerWinTimes = computerWinTimes;
    GameResults.DrawTimes = DrawTimes;
    GameResults.Winner = WhoWonGame(playerWinTimes, computerWinTimes);
    GameResults.WinnerName = winnerName(GameResults.Winner);
    return GameResults;
}

enGameChoices ReadPlayerChoice()
{
    short choice = 1;
    do
    {
        cout << "Enter your choice: [1] Stone, [2] Paper, [3] Scissors\n";
        cin >> choice;
    } while (choice < 1 || choice > 3);
    return (enGameChoices)choice;
}

enGameChoices ReadComputerChoice()
{
    return (enGameChoices)GetRandomNumber(1, 3);
}

stGameResults playGame(short howManyRounds)
{
    stRoundInfo RoundInfo;
    short playerWinTimes = 0, computerWinTimes = 0, DrawTimes = 0;

    for (short GameRound = 1; GameRound <= howManyRounds; GameRound++)
    {
        RoundInfo.RoundNumber = GameRound;
        cout << "\n--- Round " << GameRound << " Begins ---\n";
        RoundInfo.playerChoice = ReadPlayerChoice();
        RoundInfo.computerChoice = ReadComputerChoice();
        RoundInfo.Winner = WhoWonRound(RoundInfo);
        RoundInfo.WinnerName = winnerName(RoundInfo.Winner);

        if (RoundInfo.Winner == enWinner::player1)
            playerWinTimes++;
        else if (RoundInfo.Winner == enWinner::computer)
            computerWinTimes++;
        else
            DrawTimes++;

        PrintRoundInfo(RoundInfo);
    }

    return fillGameResults(howManyRounds, playerWinTimes, computerWinTimes, DrawTimes);
}

void ShowGameOverScreen()
{
    cout << "\n==============================\n";
    cout << "+++      Game Over        +++\n";
    cout << "==============================\n";
}

void showFinalGameResults(stGameResults GameResults)
{
    cout << "\nGame Rounds: " << GameResults.GameRounds << endl;
    cout << "Player Wins: " << GameResults.playerWinTimes << endl;
    cout << "Computer Wins: " << GameResults.computerWinTimes << endl;
    cout << "Draws: " << GameResults.DrawTimes << endl;
    cout << "Final Winner: " << GameResults.WinnerName << endl;
}

short ReadHowManyRounds()
{
    short GameRounds = 1;
    do
    {
        cout << "\nHow Many Rounds? (1 to 10): ";
        cin >> GameRounds;
    } while (GameRounds < 1 || GameRounds > 10);
    return GameRounds;
}

void startGame()
{
    char playAgain = 'Y';
    do
    {
        system("cls");
        stGameResults GameResults = playGame(ReadHowManyRounds());
        ShowGameOverScreen();
        showFinalGameResults(GameResults);

        cout << "\nDo you want to play again? (y/n): ";
        cin >> playAgain;
    } while (playAgain == 'y' || playAgain == 'Y');
}

int main()
{
    srand((unsigned)time(NULL));
    startGame();
    return 0;
}
